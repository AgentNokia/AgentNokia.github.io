var XXX = (function (exports) {
    'use strict';

    /******************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise, SuppressedError, Symbol */


    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }

    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (g && (g = 0, op[0] && (_ = 0)), _) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    }

    typeof SuppressedError === "function" ? SuppressedError : function (error, suppressed, message) {
        var e = new Error(message);
        return e.name = "SuppressedError", e.error = error, e.suppressed = suppressed, e;
    };

    // import { vec3 } from "./mth.js";
    var vec3 = /** @class */ (function () {
        function vec3(x, y, z) {
            if (x == undefined)
                (this.x = 0), (this.y = 0), (this.z = 0);
            else if (typeof x == 'object')
                (this.x = x.x), (this.y = x.y), (this.z = x.z);
            else if (y == undefined && z == undefined)
                (this.x = x), (this.y = x), (this.z = x);
            else
                (this.x = x), (this.y = y), (this.z = z);
        }
        vec3.prototype.set = function (x, y, z) {
            this.x = x;
            this.y = y;
            this.z = z;
            return this;
        }; // End of 'set' function
        vec3.prototype.dot = function (v) {
            return this.x * v.x + this.y * v.y + this.z * v.z;
        }; // End of 'dot' function
        vec3.prototype.cross = function (v) {
            return new vec3(this.y * v.z - this.z * v.y, this.z * v.x - this.x * v.z, this.x * v.y - this.y * v.x);
        }; // End of 'cross' function
        vec3.prototype.add = function (v) {
            if (typeof v == 'number')
                return new vec3(this.x + v, this.y + v, this.z + v);
            return new vec3(this.x + v.x, this.y + v.y, this.x - v.x);
        }; // End of 'add' function
        vec3.prototype.sub = function (v) {
            if (typeof v == 'number')
                return new vec3(this.x - v, this.y - v, this.z - v);
            return new vec3(this.x - v.x, this.y - v.y, this.z - v.z);
        }; // End of 'sub' function
        vec3.prototype.mul = function (v) {
            if (typeof v == 'number')
                return new vec3(this.x * v, this.y * v, this.z * v);
            return new vec3(this.x * v.x, this.y * v.y, this.z * v.z);
        }; // End of 'mul' function
        vec3.prototype.div = function (v) {
            if (typeof v == 'number')
                return new vec3(this.x / v, this.y / v, this.z / v);
            return new vec3(this.x / v.x, this.y / v.y, this.z / v.z);
        }; // End of 'div' function
        vec3.prototype.len2 = function () {
            return this.x * this.x + this.y * this.y + this.z * this.z;
        }; // End of 'len2' function
        vec3.prototype.len = function () {
            var len = this.x * this.x + this.y * this.y + this.z * this.z;
            if (len != 0 && len != 1)
                return Math.sqrt(len);
            return len;
        }; // End of 'len' function
        vec3.prototype.normalize = function () {
            var len = this.x * this.x + this.y * this.y + this.z * this.z;
            if (len != 0 && len != 1) {
                len = Math.sqrt(len);
                return new vec3(this.x / len, this.y / len, this.z / len);
            }
            return this;
        }; // End of 'normalize' function
        vec3.prototype.toArray = function () {
            return [this.x, this.y, this.z];
        }; // End of 'toArray' function
        return vec3;
    }());
    var matr = /** @class */ (function () {
        function matr(m) {
            if (m == null)
                this.m = [
                    [1, 0, 0, 0],
                    [0, 1, 0, 0],
                    [0, 0, 1, 0],
                    [0, 0, 0, 1]
                ];
            else if (typeof m == 'object' && m.length == 4)
                this.m = m;
            else
                this.m = m.m;
        } // End of 'constructor' function
        matr.prototype.addMethod = function (obj, name, func) {
            var old = obj[name];
            obj[name] = function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }
                if (func.length == args.length)
                    return func.apply(obj, args);
                else if (typeof old == 'function')
                    return old.apply(obj, args);
            };
        }; // End of 'addMethod' function
        matr.prototype.setTranslate = function (dx, dy, dz) {
            this.m = [
                [1, 0, 0, 0],
                [0, 1, 0, 0],
                [0, 0, 1, 0],
                [dx, dy, dz, 1]
            ];
            return this;
        };
        matr.prototype.setScale = function (sx, sy, sz) {
            this.m = [
                [sx, 0, 0, 0],
                [0, sy, 0, 0],
                [0, 0, sz, 0],
                [0, 0, 0, 1]
            ];
            return this;
        };
        matr.prototype.scale = function (v) {
            if (typeof v == 'object')
                return this.setScale(v.x, v.y, v.z);
            return this.setScale(v, v, v);
        };
        matr.prototype.setRotate = function (AngleInDegree, R) {
            var a = AngleInDegree * Math.PI, sine = Math.sin(a), cosine = Math.cos(a);
            var x = 0, y = 0, z = 1;
            if (typeof R == 'object')
                if (R.length == 3)
                    (x = R[0]), (y = R[1]), (z = R[2]);
                else
                    (x = R.x), (y = R.y), (z = R.z);
            // Vector normalize
            var len = x * x + y * y + z * z;
            if (len != 0 && len != 1)
                (len = Math.sqrt(len)), (x /= len), (y /= len), (z /= len);
            this.m[0][0] = cosine + x * x * (1 - cosine);
            this.m[0][1] = x * y * (1 - cosine) + z * sine;
            this.m[0][2] = x * z * (1 - cosine) - y * sine;
            this.m[0][3] = 0;
            this.m[1][0] = y * x * (1 - cosine) - z * sine;
            this.m[1][1] = cosine + y * y * (1 - cosine);
            this.m[1][2] = y * z * (1 - cosine) + x * sine;
            this.m[1][3] = 0;
            this.m[2][0] = z * x * (1 - cosine) + y * sine;
            this.m[2][1] = z * y * (1 - cosine) - x * sine;
            this.m[2][2] = cosine + z * z * (1 - cosine);
            this.m[2][3] = 0;
            this.m[3][0] = 0;
            this.m[3][1] = 0;
            this.m[3][2] = 0;
            this.m[3][3] = 1;
            return this;
        }; // End of 'setRotate' function
        matr.prototype.rotate = function (AngleInDegree, R) {
            return this.mul(new matr(null).setRotate(AngleInDegree, R));
        }; // End of 'rotate' function
        matr.prototype.transpose = function () {
            var r;
            for (var i = 0; i < 4; i++)
                for (var j = 0; j < 4; j++)
                    r[i][j] = this.m[j][i];
            return new matr(r);
        }; // End of 'transpose' function
        matr.prototype.mul = function (m) {
            var matr;
            if (m.length == 4)
                matr = m;
            else
                matr = m.m;
            this.m = [
                [
                    this.m[0][0] * matr[0][0] +
                        this.m[0][1] * matr[1][0] +
                        this.m[0][2] * matr[2][0] +
                        this.m[0][3] * matr[3][0],
                    this.m[0][0] * matr[0][1] +
                        this.m[0][1] * matr[1][1] +
                        this.m[0][2] * matr[2][1] +
                        this.m[0][3] * matr[3][1],
                    this.m[0][0] * matr[0][2] +
                        this.m[0][1] * matr[1][2] +
                        this.m[0][2] * matr[2][2] +
                        this.m[0][3] * matr[3][2],
                    this.m[0][0] * matr[0][3] +
                        this.m[0][1] * matr[1][3] +
                        this.m[0][2] * matr[2][3] +
                        this.m[0][3] * matr[3][3]
                ],
                [
                    this.m[1][0] * matr[0][0] +
                        this.m[1][1] * matr[1][0] +
                        this.m[1][2] * matr[2][0] +
                        this.m[1][3] * matr[3][0],
                    this.m[1][0] * matr[0][1] +
                        this.m[1][1] * matr[1][1] +
                        this.m[1][2] * matr[2][1] +
                        this.m[1][3] * matr[3][1],
                    this.m[1][0] * matr[0][2] +
                        this.m[1][1] * matr[1][2] +
                        this.m[1][2] * matr[2][2] +
                        this.m[1][3] * matr[3][2],
                    this.m[1][0] * matr[0][3] +
                        this.m[1][1] * matr[1][3] +
                        this.m[1][2] * matr[2][3] +
                        this.m[1][3] * matr[3][3]
                ],
                [
                    this.m[2][0] * matr[0][0] +
                        this.m[2][1] * matr[1][0] +
                        this.m[2][2] * matr[2][0] +
                        this.m[2][3] * matr[3][0],
                    this.m[2][0] * matr[0][1] +
                        this.m[2][1] * matr[1][1] +
                        this.m[2][2] * matr[2][1] +
                        this.m[2][3] * matr[3][1],
                    this.m[2][0] * matr[0][2] +
                        this.m[2][1] * matr[1][2] +
                        this.m[2][2] * matr[2][2] +
                        this.m[2][3] * matr[3][2],
                    this.m[2][0] * matr[0][3] +
                        this.m[2][1] * matr[1][3] +
                        this.m[2][2] * matr[2][3] +
                        this.m[2][3] * matr[3][3]
                ],
                [
                    this.m[3][0] * matr[0][0] +
                        this.m[3][1] * matr[1][0] +
                        this.m[3][2] * matr[2][0] +
                        this.m[3][3] * matr[3][0],
                    this.m[3][0] * matr[0][1] +
                        this.m[3][1] * matr[1][1] +
                        this.m[3][2] * matr[2][1] +
                        this.m[3][3] * matr[3][1],
                    this.m[3][0] * matr[0][2] +
                        this.m[3][1] * matr[1][2] +
                        this.m[3][2] * matr[2][2] +
                        this.m[3][3] * matr[3][2],
                    this.m[3][0] * matr[0][3] +
                        this.m[3][1] * matr[1][3] +
                        this.m[3][2] * matr[2][3] +
                        this.m[3][3] * matr[3][3]
                ]
            ];
            return this;
        }; // End of 'mul' function
        matr.prototype.determ3x3 = function (A11, A12, A13, A21, A22, A23, A31, A32, A33) {
            return (A11 * A22 * A33 -
                A11 * A23 * A32 -
                A12 * A21 * A33 +
                A12 * A23 * A31 +
                A13 * A21 * A32 -
                A13 * A22 * A31);
        }; // End of 'determ3x3' function
        matr.prototype.determ = function () {
            var det = this.m[0][0] *
                this.determ3x3(this.m[1][1], this.m[1][2], this.m[1][3], this.m[2][1], this.m[2][2], this.m[2][3], this.m[3][1], this.m[3][2], this.m[3][3]) -
                this.m[0][1] *
                    this.determ3x3(this.m[1][0], this.m[1][2], this.m[1][3], this.m[2][0], this.m[2][2], this.m[2][3], this.m[3][0], this.m[3][2], this.m[3][3]) +
                this.m[0][2] *
                    this.determ3x3(this.m[1][0], this.m[1][1], this.m[1][3], this.m[2][0], this.m[2][1], this.m[2][3], this.m[3][0], this.m[3][1], this.m[3][3]) -
                this.m[0][3] *
                    this.determ3x3(this.m[1][0], this.m[1][1], this.m[1][2], this.m[2][0], this.m[2][1], this.m[2][2], this.m[3][0], this.m[3][1], this.m[3][2]);
            return det;
        }; // End of 'determ' function
        matr.prototype.inverse = function () {
            var r;
            var det = this.determ();
            if (det == 0) {
                var m = [
                    [1, 0, 0, 0],
                    [0, 1, 0, 0],
                    [0, 0, 1, 0],
                    [0, 0, 0, 1]
                ];
                return new matr(m);
            }
            /* Build adjoint matrix */
            r[0][0] =
                this.determ3x3(this.m[1][1], this.m[1][2], this.m[1][3], this.m[2][1], this.m[2][2], this.m[2][3], this.m[3][1], this.m[3][2], this.m[3][3]) / det;
            r[1][0] =
                -this.determ3x3(this.m[1][0], this.m[1][2], this.m[1][3], this.m[2][0], this.m[2][2], this.m[2][3], this.m[3][0], this.m[3][2], this.m[3][3]) / det;
            r[2][0] =
                this.determ3x3(this.m[1][0], this.m[1][1], this.m[1][3], this.m[2][0], this.m[2][1], this.m[2][3], this.m[3][0], this.m[3][1], this.m[3][3]) / det;
            r[3][0] =
                -this.determ3x3(this.m[1][0], this.m[1][1], this.m[1][2], this.m[2][0], this.m[2][1], this.m[2][2], this.m[3][0], this.m[3][1], this.m[3][2]) / det;
            r[0][1] =
                -this.determ3x3(this.m[0][1], this.m[0][2], this.m[0][3], this.m[2][1], this.m[2][2], this.m[2][3], this.m[3][1], this.m[3][2], this.m[3][3]) / det;
            r[1][1] =
                this.determ3x3(this.m[0][0], this.m[0][2], this.m[0][3], this.m[2][0], this.m[2][2], this.m[2][3], this.m[3][0], this.m[3][2], this.m[3][3]) / det;
            r[2][1] =
                -this.determ3x3(this.m[0][0], this.m[0][1], this.m[0][3], this.m[2][0], this.m[2][1], this.m[2][3], this.m[3][0], this.m[3][1], this.m[3][3]) / det;
            r[3][1] =
                this.determ3x3(this.m[0][0], this.m[0][1], this.m[0][2], this.m[2][0], this.m[2][1], this.m[2][2], this.m[3][0], this.m[3][1], this.m[3][2]) / det;
            r[0][2] =
                this.determ3x3(this.m[0][1], this.m[0][2], this.m[0][3], this.m[1][1], this.m[1][2], this.m[1][3], this.m[3][1], this.m[3][2], this.m[3][3]) / det;
            r[1][2] =
                -this.determ3x3(this.m[0][0], this.m[0][2], this.m[0][3], this.m[1][0], this.m[1][2], this.m[1][3], this.m[3][0], this.m[3][2], this.m[3][3]) / det;
            r[2][2] =
                this.determ3x3(this.m[0][0], this.m[0][1], this.m[0][3], this.m[1][0], this.m[1][1], this.m[1][3], this.m[3][0], this.m[3][1], this.m[3][3]) / det;
            r[3][2] =
                -this.determ3x3(this.m[0][0], this.m[0][1], this.m[0][2], this.m[1][0], this.m[1][1], this.m[1][2], this.m[3][0], this.m[3][1], this.m[3][2]) / det;
            r[0][3] =
                -this.determ3x3(this.m[0][1], this.m[0][2], this.m[0][3], this.m[1][1], this.m[1][2], this.m[1][3], this.m[2][1], this.m[2][2], this.m[2][3]) / det;
            r[1][3] =
                this.determ3x3(this.m[0][0], this.m[0][2], this.m[0][3], this.m[1][0], this.m[1][2], this.m[1][3], this.m[2][0], this.m[2][2], this.m[2][3]) / det;
            r[2][3] =
                -this.determ3x3(this.m[0][0], this.m[0][1], this.m[0][3], this.m[1][0], this.m[1][1], this.m[1][3], this.m[2][0], this.m[2][1], this.m[2][3]) / det;
            r[3][3] =
                this.determ3x3(this.m[0][0], this.m[0][1], this.m[0][2], this.m[1][0], this.m[1][1], this.m[1][2], this.m[2][0], this.m[2][1], this.m[2][2]) / det;
            this.m = r;
            return this;
        }; // End of 'inverse' function
        matr.prototype.setIdentity = function () {
            this.m = [
                [1, 0, 0, 0],
                [0, 1, 0, 0],
                [0, 0, 1, 0],
                [0, 0, 0, 1]
            ];
            return this;
        }; // End of 'inverse' function
        matr.prototype.setView = function (Loc, At, Up1) {
            var Dir = At.sub(Loc).normalize(), Right = Dir.cross(Up1).normalize(), Up = Right.cross(Dir).normalize();
            this.m = [
                [Right.x, Up.x, -Dir.x, 0],
                [Right.y, Up.y, -Dir.y, 0],
                [Right.z, Up.z, -Dir.z, 0],
                [-Loc.dot(Right), -Loc.dot(Up), Loc.dot(Dir), 1]
            ];
            return this;
        }; // End of 'setView' function
        matr.prototype.setOrtho = function (Left, Right, Bottom, Top, Near, Far) {
            this.m = [
                [2 / (Right - Left), 0, 0, 0],
                [0, 2 / (Top - Bottom), 0, 0],
                [0, 0, -2 / (Far - Near), 0],
                [
                    -(Right + Left) / (Right - Left),
                    -(Top + Bottom) / (Top - Bottom),
                    -(Far + Near) / (Far - Near),
                    1
                ]
            ];
            return this;
        }; // End of 'setOrtho' function
        matr.prototype.setFrustum = function (Left, Right, Bottom, Top, Near, Far) {
            this.m = [
                [(2 * Near) / (Right - Left), 0, 0, 0],
                [0, (2 * Near) / (Top - Bottom), 0, 0],
                [
                    (Right + Left) / (Right - Left),
                    (Top + Bottom) / (Top - Bottom),
                    -(Far + Near) / (Far - Near),
                    -1
                ],
                [0, 0, (-2 * Near * Far) / (Far - Near), 0]
            ];
            return this;
        }; // End of 'setFrustum' function
        matr.prototype.view = function (Loc, At, Up1) {
            return this.mul(new matr(null).setView(Loc, At, Up1));
        }; // End of 'view' function
        matr.prototype.ortho = function (Left, Right, Bottom, Top, Near, Far) {
            return this.mul(new matr(null).setOrtho(Left, Right, Bottom, Top, Near, Far));
        }; // End of 'ortho' function
        matr.prototype.frustum = function (Left, Right, Bottom, Top, Near, Far) {
            return this.mul(new matr(null).setFrustum(Left, Right, Bottom, Top, Near, Far));
        }; // End of 'frustum' function
        matr.prototype.transform = function (V) {
            var w = V.x * this.m[0][3] +
                V.y * this.m[1][3] +
                V.z * this.m[2][3] +
                this.m[3][3];
            return new vec3((V.x * this.m[0][0] +
                V.y * this.m[1][0] +
                V.z * this.m[2][0] +
                this.m[3][0]) /
                w, (V.x * this.m[0][1] +
                V.y * this.m[1][1] +
                V.z * this.m[2][1] +
                this.m[3][1]) /
                w, (V.x * this.m[0][2] +
                V.y * this.m[1][2] +
                V.z * this.m[2][2] +
                this.m[3][2]) /
                w);
        }; // End of 'transform' function
        matr.prototype.transformVector = function (V) {
            return new vec3(V.x * this.m[0][0] + V.y * this.m[1][0] + V.z * this.m[2][0], V.x * this.m[0][1] + V.y * this.m[1][1] + V.z * this.m[2][1], V.x * this.m[0][2] + V.y * this.m[1][2] + V.z * this.m[2][2]);
        }; // End of 'transformVector' function
        matr.prototype.transformPoint = function (V) {
            return new vec3(V.x * this.m[0][0] +
                V.y * this.m[1][0] +
                V.z * this.m[2][0] +
                this.m[3][0], V.x * this.m[0][1] +
                V.y * this.m[1][1] +
                V.z * this.m[2][1] +
                this.m[3][1], V.x * this.m[0][2] +
                V.y * this.m[1][2] +
                V.z * this.m[2][2] +
                this.m[3][2]);
        }; // End of 'transformPoint' function
        return matr;
    }());

    var camera = /** @class */ (function () {
        function camera() {
            // Projection properties
            this.projSize = 0.1; // Project plane fit square
            this.projDist = 0.1; // Distance to project plane from viewer (near)
            this.projFarClip = 1800; // Distance to project far clip plane (far)
            // Local size data
            this.frameW = 30; // Frame width
            this.frameH = 30; // Frame height
            // Matrices
            this.matrView = new matr(null); // View coordinate system matrix
            this.matrProj = new matr(null); // Projection coordinate system matrix
            this.matrVP = new matr(null); // View and projection matrix precalculate value
            // Set camera default settings
            this.loc = new vec3(0, 0, 0); // Camera location
            this.at = new vec3(0, 0, 0); // Camera destination
            this.dir = new vec3(0, 0, 0); // Camera Direction
            this.up = new vec3(0, 0, 0); // Camera UP direction
            this.right = new vec3(0, 0, 0); // Camera RIGHT direction
            this.setDef();
        } // End of 'constructor' function
        // Camera parmeters setting function
        camera.prototype.set = function (loc, at, up) {
            this.matrView.setView(loc, at, up);
            this.loc = new vec3(loc, 0, 0);
            this.at = new vec3(at.x, at.y, at.z);
            this.dir.set(-this.matrView.m[0][2], -this.matrView.m[1][2], -this.matrView.m[2][2]);
            this.up.set(this.matrView.m[0][1], this.matrView.m[1][1], this.matrView.m[2][1]);
            this.right.set(this.matrView.m[0][0], this.matrView.m[1][0], this.matrView.m[2][0]);
            this.matrVP = new matr(this.matrView).mul(this.matrProj);
        }; // End of 'set' function
        // Projection parameters setting function.
        camera.prototype.setProj = function (projSize, projDist, projFarClip) {
            var rx = projSize, ry = projSize;
            this.projDist = projDist;
            this.projSize = projSize;
            this.projFarClip = projFarClip;
            // Correct aspect ratio
            if (this.frameW > this.frameH)
                rx *= this.frameW / this.frameH;
            else
                ry *= this.frameH / this.frameW;
            this.matrProj.setFrustum(-rx / 2.0, rx / 2.0, -ry / 2.0, ry / 2.0, projDist, projFarClip);
            // pre-calculate view * proj matrix
            this.matrVP = new matr(this.matrView).mul(this.matrProj);
        }; // End of 'setProj' function
        // Resize camera and projection function.
        camera.prototype.setSize = function (frameW, frameH) {
            if (frameW < 1)
                frameW = 1;
            if (frameH < 1)
                frameH = 1;
            this.frameW = frameW;
            this.frameH = frameH;
            // Reset projection with new render window size
            this.setProj(this.projSize, this.projDist, this.projFarClip);
        }; // End of 'setSize' function
        // Camera set default values function.
        camera.prototype.setDef = function () {
            this.loc.set(0, 0, -8);
            this.at.set(0, 0, 0);
            this.dir.set(0, 0, -1);
            this.up.set(0, 1, 0);
            this.right.set(1, 0, 0);
            this.projDist = 0.1;
            this.projSize = 0.1;
            this.projFarClip = 1800;
            this.frameW = 30;
            this.frameH = 30;
            this.set(this.loc, this.at, this.up);
            this.setProj(this.projSize, this.projDist, this.projFarClip);
            this.setSize(this.frameW, this.frameH);
        }; // End of 'setDef' function
        return camera;
    }()); // End of 'camera' class

    var timer = /** @class */ (function () {
        function timer() {
            this.d = new Date();
            this.startTime = this.oldTime = this.oldTimeFPS = new Date().getTime();
            this.frameCounter = 0;
            this.isPause = false;
            this.FPS = 30.0;
            this.pauseTime = 0;
            this.globalDeltaTime = 0;
            this.globalTime = 0;
            this.time = 0;
            this.deltaTime = 0;
            this.timePerSec = 1000;
        } /* End of 'timer' function */
        /* Response.
         * ARGUMENTS: None.
         * RETURNS: None.
         */
        timer.prototype.response = function () {
            /* Global time */
            this.globalTime = (Date.now() - this.startTime) / this.timePerSec;
            this.globalDeltaTime = (Date.now() - this.oldTime) / this.timePerSec;
            /* Time with pause */
            if (this.isPause) {
                this.deltaTime = 0;
                this.pauseTime += Date.now() - this.oldTime;
            }
            else {
                this.deltaTime = this.globalDeltaTime;
                this.time =
                    (Date.now() - this.pauseTime - this.startTime) / this.timePerSec;
            }
            /* FPS */
            this.frameCounter++;
            if (Date.now() - this.oldTimeFPS > this.timePerSec) {
                this.FPS =
                    (this.frameCounter * this.timePerSec) / (Date.now() - this.oldTimeFPS);
                this.oldTimeFPS = Date.now();
                this.frameCounter = 0;
            }
            this.oldTime = Date.now();
        };
        return timer;
    }());

    // https://github.com/Eugeny/tabby
    // https://michaelwalczyk.com/blog-ray-marching.html
    // https://iquilezles.org/articles/distfunctions/
    var gl;
    var keyx = 0, keyy = 0, keyanglex = 0, keyangley = 0, mousewheel = 0;
    var numOfSpheres = 1, numOfThorus = 0, numOfCubes = 0;
    var events;
    events = {};
    var myTimer = new timer();
    // а тут теперь можно писать инструкции для любых комбинаций
    function action() {
        if (events["ArrowLeft"])
            keyanglex += 30 * myTimer.deltaTime; // <
        if (events["ArrowUp"])
            keyangley += 30 * myTimer.deltaTime; // ^
        if (events["ArrowRight"])
            keyanglex -= 30 * myTimer.deltaTime; // >
        if (events["ArrowDown"])
            keyangley -= 30 * myTimer.deltaTime; // arrow down
        if (events["a"])
            keyx -= 0.03; // a
        if (events["d"])
            keyx += 0.03; // d
        if (events["s"])
            keyy -= 0.03; // s
        if (events["w"])
            keyy += 0.03; // W
    }
    function loadShader(type, source) {
        var shader = gl.createShader(type);
        if (!shader)
            return null;
        // Send the source to the shader object
        gl.shaderSource(shader, source);
        // Compile the shader program
        gl.compileShader(shader);
        // See if it compiled successfully
        if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {
            alert("An error occurred compiling the shaders: ".concat(gl.getShaderInfoLog(shader)));
            gl.deleteShader(shader);
            return null;
        }
        return shader;
    }
    //
    // Initialize a shader program, so WebGL knows how to draw our data
    //
    function initShaderProgram(vsSource, fsSource) {
        var vertexShader = loadShader(gl.VERTEX_SHADER, vsSource);
        if (!vertexShader)
            return;
        var fragmentShader = loadShader(gl.FRAGMENT_SHADER, fsSource);
        if (!fragmentShader)
            return;
        // Create the shader program
        var shaderProgram = gl.createProgram();
        if (!shaderProgram)
            return;
        gl.attachShader(shaderProgram, vertexShader);
        gl.attachShader(shaderProgram, fragmentShader);
        gl.linkProgram(shaderProgram);
        // If creating the shader program failed, alert
        if (!gl.getProgramParameter(shaderProgram, gl.LINK_STATUS)) {
            alert("Unable to initialize the shader program: ".concat(gl.getProgramInfoLog(shaderProgram)));
            return null;
        }
        return shaderProgram;
    }
    function initPositionBuffer() {
        // Create a buffer for the square's positions.
        var positionBuffer = gl.createBuffer();
        gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);
        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([1.0, 1.0, -1.0, 1.0, 1.0, -1.0, -1.0, -1.0]), gl.STATIC_DRAW);
        return positionBuffer;
    }
    function initObjectBuffer(positions) {
        var objectBuffer = gl.createBuffer();
        gl.bindBuffer(gl.ARRAY_BUFFER, objectBuffer);
        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(positions), gl.STATIC_DRAW);
        return objectBuffer;
    }
    function initBuffers(positions) {
        var positionBuffer = initPositionBuffer();
        var objectBuffer = initObjectBuffer(positions);
        return {
            position: positionBuffer,
            object: objectBuffer
        };
    }
    // Tell WebGL how to pull out the positions from the position
    // buffer into the vertexPosition attribute.
    function setPositionAttribute(buffers, programInfo) {
        var numComponents = 2; // pull out 2 values per iteration
        var type = gl.FLOAT; // the data in the buffer is 32bit floats
        var normalize = false; // don't normalize
        var stride = 0; // how many bytes to get from one set of values to the next
        // 0 = use type and numComponents above
        var offset = 0; // how many bytes inside the buffer to start from
        gl.bindBuffer(gl.ARRAY_BUFFER, buffers.position);
        gl.vertexAttribPointer(programInfo.attribLocations.vertexPosition, numComponents, type, normalize, stride, offset);
        gl.enableVertexAttribArray(programInfo.attribLocations.vertexPosition);
    }
    function reloadShaders() {
        return __awaiter(this, void 0, void 0, function () {
            var vsResponse, vsText, fsResponse, fsText, shaderProgram, programInfo;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, fetch('./march.vertex.glsl' + '?nocache' + new Date().getTime())];
                    case 1:
                        vsResponse = _a.sent();
                        return [4 /*yield*/, vsResponse.text()];
                    case 2:
                        vsText = _a.sent();
                        return [4 /*yield*/, fetch('./frag1.glsl' + '?nocache' + new Date().getTime())];
                    case 3:
                        fsResponse = _a.sent();
                        return [4 /*yield*/, fsResponse.text()];
                    case 4:
                        fsText = _a.sent();
                        shaderProgram = initShaderProgram(vsText, fsText);
                        if (!shaderProgram)
                            return [2 /*return*/, null];
                        programInfo = {
                            program: shaderProgram,
                            attribLocations: {
                                vertexPosition: gl.getAttribLocation(shaderProgram, 'in_pos'),
                                objectPosition: gl.getAttribLocation(shaderProgram, 'object')
                            }
                        };
                        return [2 /*return*/, programInfo];
                }
            });
        });
    }
    function main() {
        return __awaiter(this, void 0, void 0, function () {
            var canvas, cl, cl1, cl2, cl3, cl4, cl5, positions, buffers, BeginTime, cam, programInfo, time, a, draw, myCalculateMousePosition;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        canvas = document.querySelector('#glcanvas');
                        if (!canvas) {
                            return [2 /*return*/];
                        }
                        // Initialize the GL context
                        gl = canvas.getContext('webgl2');
                        // Only continue if WebGL is available and working
                        if (gl === null) {
                            alert('Unable to initialize WebGL. Your browser or machine may not support it.');
                            return [2 /*return*/];
                        }
                        cl = document.getElementById('clickMe');
                        cl1 = document.getElementById('clickMe1');
                        if (cl)
                            cl.onclick = function () {
                                numOfSpheres++;
                            };
                        if (cl1)
                            cl1.onclick = function () {
                                numOfSpheres--;
                            };
                        cl2 = document.getElementById('clickMe2');
                        cl3 = document.getElementById('clickMe3');
                        if (cl2)
                            cl2.onclick = function () {
                                numOfThorus++;
                            };
                        if (cl3)
                            cl3.onclick = function () {
                                numOfThorus--;
                            };
                        cl4 = document.getElementById('clickMe4');
                        cl5 = document.getElementById('clickMe5');
                        if (cl4)
                            cl4.onclick = function () {
                                numOfCubes++;
                            };
                        if (cl5)
                            cl5.onclick = function () {
                                numOfCubes--;
                            };
                        // Set clear color to black, fully opaque
                        gl.clearColor(0.0, 0.0, 0.5, 1.0);
                        // Clear the color buffer with specified clear color
                        gl.clear(gl.COLOR_BUFFER_BIT);
                        positions = [1, 0, 0, 0];
                        buffers = initBuffers(positions);
                        BeginTime = Date.now();
                        cam = new camera();
                        return [4 /*yield*/, reloadShaders()];
                    case 1:
                        programInfo = _a.sent();
                        time = myTimer.globalTime;
                        a = new vec3(0, 0, -5);
                        draw = function () { return __awaiter(_this, void 0, void 0, function () {
                            var program, uniformLoc, uniformLoc1, uniformAnglex, uniformAngley, uniformZoom, uniformNumber, uniformThor, uniformCube, timeFromStart, b, v, offset, vertexCount, t;
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0:
                                        // myTimer.FPS = 30;
                                        myTimer.response();
                                        if (!(time + 3 < myTimer.time)) return [3 /*break*/, 2];
                                        return [4 /*yield*/, reloadShaders()];
                                    case 1:
                                        programInfo = _a.sent();
                                        time = myTimer.time;
                                        _a.label = 2;
                                    case 2:
                                        if (!programInfo) {
                                            return [2 /*return*/];
                                        }
                                        program = programInfo.program;
                                        // mousePos = myCalculateMousePosition(canvas, event);
                                        gl.clearColor(0.0, 0.0, 0.0, 1.0); // Clear to black, fully opaque
                                        gl.clearDepth(1.0); // Clear everything
                                        gl.enable(gl.DEPTH_TEST); // Enable depth testing
                                        gl.depthFunc(gl.LEQUAL); // Near things obscure far things
                                        // Clear the canvas before we start drawing on it.
                                        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
                                        // Create a perspective matrix, a special matrix that is
                                        // used to simulate the distortion of perspective in a camera.
                                        // Our field of view is 45 degrees, with a width/height
                                        // ratio that matches the display size of the canvas
                                        // and we only want to see objects between 0.1 units
                                        // and 100 units away from the camera.
                                        // buffer into the vertexPosition attribute.
                                        setPositionAttribute(buffers, programInfo);
                                        uniformLoc = gl.getUniformLocation(program, 'time');
                                        uniformLoc1 = gl.getUniformLocation(program, 'Loc');
                                        uniformAnglex = gl.getUniformLocation(program, 'AngleX');
                                        uniformAngley = gl.getUniformLocation(program, 'AngleY');
                                        uniformZoom = gl.getUniformLocation(program, 'zoom');
                                        uniformNumber = gl.getUniformLocation(program, 'sphere_count');
                                        uniformThor = gl.getUniformLocation(program, 'thorus_count');
                                        uniformCube = gl.getUniformLocation(program, 'cubes_count');
                                        timeFromStart = Date.now() - BeginTime;
                                        // Tell WebGL to use our program when drawing
                                        gl.useProgram(programInfo.program);
                                        gl.uniform1f(uniformLoc, Math.abs(Math.sin(timeFromStart / 1000.0) * 5) + 1.2);
                                        action();
                                        gl.uniform1f(uniformAnglex, keyanglex);
                                        gl.uniform1f(uniformAngley, keyangley);
                                        gl.uniform1f(uniformZoom, mousewheel);
                                        gl.uniform1i(uniformNumber, numOfSpheres);
                                        gl.uniform1i(uniformThor, numOfThorus);
                                        gl.uniform1i(uniformCube, numOfCubes);
                                        b = new vec3(keyx * 10, keyy * 10, -5);
                                        v = a.add(b.sub(a).mul(myTimer.deltaTime));
                                        // a = new vec3(keyx * 10, keyy * 10, -5);
                                        a = v;
                                        // a = new matr(null).setRotate(keyanglex, new vec3(1, 0, 0)).transform(a);
                                        cam.set(a, new vec3(0, 0, 0), new vec3(0, 1, 0));
                                        gl.uniform3fv(uniformLoc1, new Float32Array([a.x, a.y, a.z]));
                                        {
                                            offset = 0;
                                            vertexCount = 4;
                                            gl.drawArrays(gl.TRIANGLE_STRIP, offset, vertexCount);
                                        }
                                        t = document.getElementById('fps');
                                        if (t != null)
                                            t.innerHTML = myTimer.FPS.toString();
                                        // positions = [-100, -100, 0, 0];
                                        // buffers = initBuffers(positions);
                                        // setPositionAttribute(buffers, programInfo);
                                        // {
                                        //     const offset = 0;
                                        //     const vertexCount = 4;
                                        //     gl.drawArrays(gl.TRIANGLE_STRIP, offset, vertexCount);
                                        // }
                                        window.requestAnimationFrame(draw);
                                        return [2 /*return*/];
                                }
                            });
                        }); };
                        draw();
                        myCalculateMousePosition = function (canvas, event) {
                            var rect = canvas.getBoundingClientRect();
                            return {
                                x: event.clientX - Math.trunc(rect.left),
                                y: event.clientY - Math.trunc(rect.top)
                            };
                        };
                        document.addEventListener('keydown', function (event) {
                            events[event.key] = true;
                        });
                        document.addEventListener('keyup', function (event) {
                            events[event.key] = false;
                        });
                        /*   window.addEventListener('keydown', (event) => {
                            if (event.key == 'w') {
                                keyy += 0.03;
                              } else if (event.key == 's') {
                                keyy -= 0.03;
                              }
                          });
                          window.addEventListener('keydown', (event) => {
                            if (event.key == 'ArrowUp') {
                              keyangley -= 0.3;
                            } else if (event.key == 'ArrowDown') {
                              keyangley += 0.3;
                            }
                          });
                          window.addEventListener('keydown', (event) => {
                            if (event.key == 'ArrowLeft') {
                              keyanglex -= 0.3;
                            } else if (event.key == 'ArrowRight') {
                              keyanglex += 0.3;
                            }
                          });
                          window.addEventListener('keydown', (event) => {
                            if (event.key == 'a') {
                              keyx -= 0.03;
                            } else if (event.key == 'd') {
                              keyx += 0.03;
                            }
                          }); */
                        window.addEventListener('mousemove', function (event) {
                            var mousePos = myCalculateMousePosition(canvas, event);
                            mousePos.x;
                            mousePos.y;
                        });
                        window.addEventListener('wheel', function (event) {
                            mousewheel -= event.deltaY / 2;
                            // (zoomx0 += event.deltaY / 100 / (canvas.width - mouseX)),
                            // (zoomy0 += event.deltaY / 100 / mouseY),
                            // (zoomx1 += event.deltaY / 100 / mouseX),
                            // (zoomy1 += event.deltaY / 100 / (canvas.width - mouseY));
                        });
                        return [2 /*return*/];
                }
            });
        });
    }
    window.addEventListener('load', function () {
        main();
    });

    exports.main = main;

    return exports;

})({});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
